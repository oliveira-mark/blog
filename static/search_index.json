[{"title":"Guia Incompleto React Native","description":null,"tags":["frontend"],"slug":"guia-incompleto-react-native","html":"React Native é um framework criado pelo Facebook que permite desenvolver aplicações mobile para iOS e Android utilizando JavaScript e React. Ele se destaca por permitir o reaproveitamento de código entre plataformas, proporcionando uma experiência de desenvolvimento mais eficiente. Se você está começando com React Native, pode se deparar com novos conceitos e desafios, como lidar com componentes nativos, estilização responsiva e performance. Mas não se preocupe, com a prática tudo se torna mais claro. Para começar, é importante entender alguns conceitos fundamentais: Componentes: assim como no React, o React Native utiliza componentes reutilizáveis para construir a interface da aplicação. Estilização com StyleSheet: diferente do CSS tradicional, o React Native utiliza um objeto JavaScript para estilizar os componentes. Componentes Nativos: possibilitam a integração com funcionalidades específicas de cada plataforma, como câmera e GPS. Navegação: a navegação entre telas é feita com bibliotecas como React Navigation, que oferece diversas opções de navegação. React Native continua evoluindo com melhorias na performance, novas APIs e integração com frameworks como Expo, que simplifica o desenvolvimento e distribuição de apps. Este post tem como objetivo registrar os aprendizados que venho adquirindo sobre React Native ao longo dos anos. Vou atualizar este material constantemente para que sirva como base de consulta sempre que eu precisar relembrar algo. Gostou do conteúdo e quer discutir mais sobre o tema? Estou no LinkedIn, é só me chamar!"},{"title":"Guia Incompleto Testes no Frontend","description":null,"tags":["frontend"],"slug":"guia-incompleto-testes-no-frontend","html":"Você teste já fez testes no frontend? À primeira vista, pode parecer desnecessário testar interfaces e componentes. Afinal, você mesmo pode clicar em um botão e ver que ele está funcionando, certo? rs Sim, mas existem situações em que configurar testes pode impedir que você cometa erros e quebre parte de sua aplicação. Veja alguns exemplos: Alterações em componentes: é comum surgir demandas de alteração ou criação de componentes que podem impactar o funcionamento de outros. Simular uma API: caso a API ainda não esteja pronta ou simplesmente para evitar requests desnecessárias, você pode usar mocks. Simulação de cenários: para garantir que sua aplicação funcione corretamente, você pode configurar seus testes para diferentes cenários. Segurança e escalabilidade: os testes dão a segurança de que as novas funcionalidades não vão quebrar sua aplicação. São muitos benefícios. Para mim, o maior deles é a consciência tranquila ao fazer deploy. Este post tem como objetivo registrar os aprendizados que venho adquirindo sobre testes no frontend ao longo dos anos. Vou atualizar este material constantemente para que sirva como base de consulta sempre que eu precisar relembrar algo. Diferença entre Testes Unitários, de Integração e E2E Testes de Unidade: precisam ser simples e isolados do restante da aplicação. São usados com mais frequência no dia a dia e destinados a testar um componente, uma função ou elemento específico. Testes de Integração: têm como objetivo verificar o funcionamento correto da comunicação entre partes da sua aplicação. São especialmente úteis para testar integrações externas, como APIs, bancos de dados e outros serviços. Testes E2E: são os mais completos e custosos. Eles simulam a interação de um usuário com sua aplicação. Por exemplo: criando uma conta, fazendo login, salvando alterações. Neste material, irei explorar as características, vantagens, ferramentas e exemplos de código dessas três modalidades de teste no frontend. Existem testes para o backend, que podem usar as mesmas ferramentas abordadas nesta publicação. Porém, testes no backend não são o foco deste material. 1. Testes de Unidade (ou Unitários) Testes de unidade são uma boa prática de desenvolvimento que consiste em testar individualmente unidades, funções, métodos ou qualquer lógica da sua aplicação. Testam seu funcionamento de forma isolada e reportam possíveis erros. No frontend, esses testes geralmente se concentram em garantir que componentes, como botões, formulários ou funções, funcionem conforme esperado. Para facilitar esse processo, temos ferramentas como Jest, Vitest, React Testing Library, entre outras. Vou explicar melhor o uso dessas ferramentas ainda neste texto. Qual a vantagem do Teste de Unidade em relação aos outros? A principal vantagem é a rapidez e praticidade. Depois de configurar os testes em todas as unidades necessárias, você pode rodar verificações sempre que fizer alguma alteração, garantindo que todas as unidades estejam funcionando. Graças a essa simplicidade, a manutenção nos componentes e em seus respectivos testes é muito mais simples e prática em comparação com outros modelos que vamos apresentar ainda neste texto. Vamos ver na prática? Agora vou te apresentar algumas ferramentas que facilitam o dia a dia de desenvolvimento com testes unitários. Além de explicar seus pontos fortes, irei mostrar sua configuração inicial e alguns exemplos de código. Jest em breve Vitest em breve React Testing Library em breve Gostou do conteúdo e quer discutir mais sobre o tema? Estou no LinkedIn, é só me chamar!"},{"title":"Guia Incompleto Angular","description":null,"tags":["frontend"],"slug":"guia-incompleto-angular","html":"Angular é um framework robusto para a criação de aplicações frontend escaláveis e de alta performance. Desde o seu lançamento, ele tem sido amplamente utilizado para construir aplicações web modernas, com uma estrutura bem definida e diversas funcionalidades integradas. Se você está começando com Angular, pode parecer um pouco assustador no início. Conceitos como componentes, diretivas, serviços e injeção de dependência podem ser confusos. Mas com o tempo, tudo se torna mais claro. Para começar, é importante entender alguns conceitos fundamentais: Componentes: são a base de uma aplicação Angular, definindo a lógica e a estrutura de apresentação. Templates e Diretivas: permitem criar interfaces dinâmicas e reativas de forma declarativa. Serviços e Injeção de Dependência: promovem a reutilização de código e a separação de responsabilidades. Módulos: organizam a aplicação em partes reutilizáveis e de fácil manutenção. Angular oferece uma solução completa, com ferramentas como Angular CLI, RxJS e o sistema de roteamento embutido para criar aplicações robustas e eficientes. Este post tem como objetivo registrar os aprendizados que venho adquirindo sobre Angular ao longo dos anos. Vou atualizar este material constantemente para que sirva como base de consulta sempre que eu precisar relembrar algo. Gostou do conteúdo e quer discutir mais sobre o tema? Estou no LinkedIn, é só me chamar!"},{"title":"Guia Incompleto React","description":null,"tags":["frontend"],"slug":"guia-incompleto-react","html":"React é uma biblioteca que facilita a criação de interfaces interativas e reativas. Desde o começo o React mudou a forma como desenvolvemos aplicações frontend, trazendo conceitos como componentes reutilizáveis e uma abordagem declarativa para construir interfaces de usuário. Se você está começando com React, pode se sentir sobrecarregado com a quantidade de conceitos e ferramentas disponíveis. É normal! Hooks, estados, contextos, effects... tudo parece complexo no início. Mas acredite, com o tempo as peças se encaixam. Para começar, é importante entender alguns conceitos fundamentais: Componentes: são a base do React. Tudo gira em torno da criação e reutilização de componentes. Props e Estado: props permitem passar informações entre componentes, enquanto o estado permite que um componente gerencie seus dados internos. Hooks: funções especiais que permitem usar funcionalidades do React em componentes funcionais, como useState e useEffect. Virtual DOM: uma representação leve da interface de usuário que React utiliza para otimizar atualizações na tela. React continua evoluindo e trazendo novas soluções, como Server Components e React Suspense, que prometem melhorar ainda mais a experiência de desenvolvimento. Este post tem como objetivo registrar os aprendizados que venho adquirindo sobre React ao longo dos anos. Vou atualizar este material constantemente para que sirva como base de consulta sempre que eu precisar relembrar algo. Gostou do conteúdo e quer discutir mais sobre o tema? Estou no LinkedIn, é só me chamar!"},{"title":"Sobre","description":null,"tags":[],"slug":"sobre","html":"Desenvolvedor de Front-end com 8 anos de experiência, atuei em projetos para grandes empresas, participando da idealização de soluções eficientes para diversos mercados e tecnologias. Desenvolvendo interfaces com React.js, TypeScript, Next.js entre outras ferramentas da stack JavaScript. Experiência com integrações de APIs, otimização de pipelines CI/CD, e gestão de servidores em plataformas cloud como AWS e Google Cloud. Além de implementar novas funcionalidades em sistemas desenvolvidos em Node.js, PHP, usando frameworks como Laravel e Express.js. Estudando e me atualizando acerca de segurança da informação, performance e manutenibilidade de sistemas. Modernização de arquiteturas monolíticas e a implementação de microserviços. Sou proficiente em soluções de banco de dados como PostgreSQL, MongoDB e MySQL, garantindo a integridade e escalabilidade das informações. Com experiência direta em liderar equipes e projetos, otimizo a comunicação entre times técnicos e clientes, melhorando processos e entregas. Gostou do conteúdo e quer discutir mais sobre o tema? Estou no LinkedIn, é só me chamar!"}]